
》git diff readme.txt 查看文件改了什么
》git reset  –hard HEAD^ 回退到上一个版本
》git reset  –hard HEAD^^ 回退到上上一个版本
》git reset  –hard HEAD~100 回退到前100个版本
》git reflog 查看历史记录的版本号id
》git reset  –hard 版本号 回退到指定版本
》git push origin master 推送到远程；若远程库是空的，即第一次推送master分支，要加–u参数
》git stash 将当前的工作场景保存起来
》git stash list 列出所有被保存起来的工作场景
》git stash apply　恢复上一个保存的工作场景
》git stash drop 删除上一个保存的工作场景
》git stash pop 恢复并删除上一个保存的工作场景



--------------------------------------------------------------------------------------
【Git本地仓库】
1、 git init
	将当前目录初始化为一个git仓库，并在该目录下会生成一个名为.git目录
2、 git clone git@git.vic.sina.com.cn:~/repos/weibo_alk.git weibo_alk
	从weibo_alk.git远程仓库克隆到本地并保存在weibo_alk目录中
3、 git status
	确定哪些文件当前处于什么状态
4、 git add [file|directory]
	开始跟踪一个新文件或目录
5、 忽略文件：仓库根目录下的.gitignore文件列出了所有要忽略的文件模式
6、 git diff 
	查看未暂存的文件（即未运行git add跟踪的文件）更新了哪些内容
7、 git diff --cached
	查看已经暂存起来的文件和上次提交（git commit）时的快照之间的差异
8、 git commit -m "my first commited"
	提交修改
9、 git commit -a -m 'added new benchmarks'
	-a选项可省去commit之前运行git add README操作
10、git rm readme.txt
	从已跟踪文件清单中移除（也是从暂存区域移除），并连带从工作目录中删除指定的文件
11、git rm --cached readme.txt
	从Git暂存区移除，但仍保留在当前工作目录中。即仅仅是从跟踪清单中删除
	

【Git撤消操作】
1、 git commit --amend
	想要撤消刚刚提交的操作，可以使用 --amend 选项重新提交
	如果刚提交时忘了暂存某些文件，可以先补上暂存操作，然后再运行 --amend 提交
	如：a)git add forgotten_file；b)git commit --amend
2、 git reset HEAD <file>...
	不小心用git add . 全加到了暂存区域，可用这此命令取消暂存
3、 git checkout -- benchmarks.rb
	取消对文件的修改



【Git打标签】
1、 git tag 
	列出所有标签
2、 git tag -l 'v1.4.2.*'
	列出v1.4.2系列的标签
3、 git tag -a v1.4 -m 'my version 1.4'
	打标签v1.4；而-m选项则指定了对应的标签说明
4、 git show v1.4
	查看v1.4标签的版本的信息
5、 git push origin v1.4
	将标签推送到远程库上
6、 git push origin --tags
	提交所有本地新增的标签
7、 git log --pretty=oneline
	查询提交记录
8、 git tag -a v1.2 9fceb02
	只要在打标签的时候跟上对应提交对象的校验和（或前几位字符）即可对历史提交进行打标签
9、 git tag -d v1.4
	删除本地标签v1.4
10、git push origin --delete tag v1.4
	删除远程标签


【Git远程仓库】
1、 git remote	
	列出所有远程仓库在本地的别名，如origin
2、 git remote -v	
	列出所有远程仓库名字对应的远程库url地址
3、 git remote add [remote_repo_local_name] [url] 	
	添加远程仓库，remote_repo_local_name为本地自定义的名字
4、 git fetch [remote_repo_local_name] 
	从remote_repo_local_name指向的远程仓库抓取数据到本地
5、 git push [remote_repo_local_name] [branch_name]
	将本地branch_name分支推到remote_repo_local_name指向的远程库的branch_name分支上,如：git push origin master
6、 git push [remote_repo_local_name] [local_branch_name:remote_branch_name]
	将本地local_branch_name分支推到remote_repo_local_name指向的远程库的remote_branch_name分支上,如：git push origin master:devlop
7、 git remote show [remote_repo_local_name] 
	查看某个远程仓库的详细信息
8、 git remote rename 
	修改某个远程仓库在本地的别名，比如想把origin改成myremote可以运行：git remote rename origin myremote
9、 git remote rm [remote_repo_local_name] 
	与 git remote add [remote_repo_local_name] [url] 为互逆操作


【Git分支】
1、 git branch newBranchName
	新建一个newBranchName分支
2、 git checkout newBranchName 
	切换到新分支
3、 git checkout -b newBranchName 
	新建并切换到分支newBranchName上，等于上两步和的效果
4、 git merge branchName
	将本地分支branchName合并到当前分支
5、 git branch -d branchName
	删除本地分支branchName
6、 git branch -v
	查看各个分支最后一个提交对象的信息
7、 git branch --merged 
	查看哪些分支已被并入当前分支（译注：也就是说哪些分支是当前分支的直接上游。）
8、 git branch --no-merged 
	查看尚未合并入当前分支的分支





【Git远程分支】
1、用 remote_repo_local_name/remote_branch_name 这样的形式表示远程分支，如：origin/master
2、 git checkout -b mybranchname origin/serverfix 
	创建并切换到一个本地分支mybranchname并同步远程分支origin/serverfix的内容到本地mybranchname分支上
2、  git push origin -u mybranchname
	将新创建的本地分支mybranchname，推送并在远程仓库中创建对应的分支mybranchname 
3、 git merge origin/serverfix
	将远程分支origin/serverfix合并到当前工作的分支上
4、 git push [remote_repo_local_name] [:remote_branch_name]
	删除远程分支remote_repo_local_name/remote_branch_name，如git push origin :serverfix将删除远程的origin/serverfix分支
5、 git rebase master 
	寻找当前分支与master分支最近的共同祖先，根据这个祖先到当前分支的所有提交做一系列的补丁，然后以master分支的最后一个
	提交为起点，将补丁合并成一个新的提交到master分支，这个新的提交成为master分支的直接下游
6、 git rebase --onto master server client
	取出 client 分支，找出 client 分支和 server 分支的共同祖先之后的变化，然后把它们在 master 上重演一遍
7、 git rebase [主分支] [特性分支] 
	先取出特性分支 server，然后在主分支 master 上重演
8、 git branch --set-upstream-to=origin/dev
	将当前分支与远程的origin/dev关联，以便运行git pull; git push时，直接拉取或推送到关联的远程分支上

【更换remote地址】
1、git remote remove origin # 删掉原来git源
2、git remote add origin [url] # 将新源地址写入本地版本库配置文件
3、git push -u origin master # 提交所有代码


【Git在服务器上部署】
方法1、
将 advertorial 目录里的代码部署到服务器git@git.vic.sina.com.cn:~/repos/上
   1) cd advertorial #进入代码目录
   2) git init #若代码未初始化为git仓库，则需要运行此步
   3）cd ..
   4）git clone --bare advertorial advertorial.git  #从advertorial本地仓库中初始化一个Git目录数据的副本advertorial.git，等效于：cp -Rf advertorial/.git advertorial.git
   5）scp -r advertorial.git  git@git.vic.sina.com.cn:~/repos/  #把裸仓库复制到服务器上去
   6）cd advertorial #进入代码目录
   7) git remote add origin  git@git.vic.sina.com.cn:~/repos/advertorial.git #将代码目录与远程库关联
   8）git add . #将当前目录中的所有代码加入跟踪
   9）git commit -m "initial repository for advertorial" #将代码提交
  10）git push origin master:master #将本地的master分支推送到远程origin/master分支

方法2、
git init
git add README.md
git commit -m "first commit"
git remote add origin https://github.com/cooladdr/myTips.git (要求myTips仓库已经创建)
git push -u origin master



