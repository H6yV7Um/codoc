 
-b file            若文件存在且是一个块特殊文件，则为真
-c file            若文件存在且是一个字符特殊文件，则为真
-d file            若文件存在且是一个目录，则为真
-e file            若文件存在，则为真
-f file            若文件存在且是一个规则文件，则为真
-g file            若文件存在且设置了SGID位的值，则为真
-h file            若文件存在且为一个符合链接，则为真
-k file            若文件存在且设置了"sticky"位的值
-p file            若文件存在且为一已命名管道，则为真
-r file            若文件存在且可读，则为真
-s file            若文件存在且其大小大于零，则为真
-u file            若文件存在且设置了SUID位，则为真
-w file            若文件存在且可写，则为真
-x file            若文件存在且可执行，则为真
-o file            若文件存在且被有效用户ID所拥有，则为真
-z string          若string长度为0，则为真
-n string          若string长度不为0，则为真
string1 = string2  若两个字符串相等，则为真
string1 != string2 若两个字符串不相等，则为真
int1 -eq int2      若int1等于int2，则为真
int1 -ne int2      若int1不等于int2，则为真
int1 -lt int2      若int1小于int2，则为真
int1 -le int2      若int1小于等于int2，则为真
int1 -gt int2      若int1大于int2，则为真
int1 -ge int2      若int1大于等于int2，则为真
!expr              若expr为假则复合表达式为真。expr可以是任何有效的测试表达式
expr1 -a expr2     若expr1和expr2都为真则整式为真
expr1 -o expr2     若expr1和expr2有一个为真则整式为真
特殊变量
$0                 正在被执行命令的名字。对于shell脚本而言，这是被激活命令的路径
$n                 该变量与脚本被激活时所带的参数相对应。n是正整数，与参数位置相对应($1,$2…)
$#                 提供脚本的参数号
$*                 所有这些参数都被双引号引住。若一个脚本接收两个参数，$*等于$1$2
$@                 所有这些参数都分别被双引号引住。若一个脚本接收到两个参数，$@等价于$1$2
$?                 前一个命令执行后的退出状态
$$                 当前shell的进程号。对于shell脚本，这是其正在执行时的进程ID
$!                 前一个后台命令的进程号


###########################################################################################

一. 条件测试
1. 测试文件状态
   两种测试格式：test condition 或 [ condition ]，注意后一种方式中condition和[ ]之间的空格。
   常用的测试表达式：
                  -d 判断目标是否问目录
                  -f 判断目标是否为正规文件
                  -L 判断目标是否为符号链接
                  -r 判断目标是否可读
                  -s 判断目标是否为非空，即文件长度大于0
                  -w 判断目标是否可写
                  -u 判断文件是否有suid位置设置
                  -x 判断目标可否执行


2. 测试时使用逻辑操作符
测试文件状态是否为O K，但是有时要比较两个文件状态。shell提供三种逻辑操作完成此功能。
-a 逻辑与，操作符两边均为真，结果为真，否则为假。
-o 逻辑或，操作符两边一边为真，结果为真，否则为假。
! 逻辑否，条件为假，结果为真。


3. 字符串测试
   测试格式：test "string" 或 test string_operator "string 或 test "string" string_operator "string" 或 [ string_operator "string" ] 或 [ "string" string_operator "string" ]
   string_operator:
                  = 两个字符串相等
                  != 两个字符串不相等
                  -z 字符串是否为空串
                  -n 字符串是否为非空串


4. 数值测试
   测试格式： "number"number_operator"number" 或 [ "number"number_operator"number" ]
   number_operator:
                  -eq 数值相等。
                  -ne 数值不相等。
                  -gt 第一个数大于第二个数。
                  -lt 第一个数小于第二个数。
                  -le 第一个数小于等于第二个数。
                  -ge 第一个数大于等于第二个数。


5. expr
   expr命令一般用于整数值，但也可用于字符串。一般格式为：
   expr argument operator argument
   expr 也有模式匹配的功能， 通常格式为 expr $VALUE : 'expr_model' 或 expr $VALUE : '\(expr_model\)'，前一种返回匹配的字符的个数，后一种返回匹配的字符串。


###########################################################################################


二、字符串截取、${}的用法和变量的间接引用

1、${VAR}，取出变量VAR值
a=hjks
echo ${a}


2、${VAR:-DEFAULT}，VAR没有定义或者为空则输出$DEFAULT的值（VAR不变）
unset a 
echo ${a:-hello};echo $a


3、${VAR:=DEFAULT}，VAR没有定义或空则为$DEFAULT的值
echo ${a:=hello};echo $a


4、${VAR:+VALUE}，VAR定义则输出$VALUE,否则为空字符串（VAR不变）
a=hello
echo ${a:+yemo};echo $a

unset a
echo ${a:+yemo};echo $a


5、${VAR?MSG}，VAR未定义则打印$MSG
unset a
echo ${a?this is null}

a=123
echo ${a?this is null}


6、${VAR:?MSG}，VAR未定义或者为空则打印$MSG
unset a
echo ${a:?this is null}

typeset -i a
echo ${a:?this is null}


7、${!PERFIX*} 或 ${!PERFIX@} ，匹配所有以PERFIX开头的变量
echo ${!RAND*}
echo ${!RAND@}


8、${!VAR}变量间接引用，也可以用 eval echo \$$VAR
a=b
b=12345
echo ${!a}
eval echo \$$a


9、${#STR}，返回STR长度
b=12345
echo ${#b}


10、${STR^^}，把STR中的所有小写字母转换为大写输出(不改变值)
unset a b
a="hello Rie Kugimiya"
echo ${a^^}
echo $a


11、${STR,,}，把STR中的所有大写字母转换为小写输出（不改变值）
echo ${a,,}
echo $a


12、${STR:POSITON},从$POSITON位置提取子串
echo $a
echo ${a:5}
echo ${a: -5}   #反向从末尾开始计数$POSITON位置的子串，注意负号前的空格


13、${STR:POSITON:LENGTH}，从$POSITON位置提取长度为$LENGTH子串
echo $a
echo ${a:5:6}           #从第5个开始向后取6个字符
echo ${a:5:-3}          #从第五个开始去去掉倒数3个字符 
echo ${a: -5:-3}        #取倒数5个字符去掉倒数3个字符
                        #由于减号是前面的关键字所以POSITON前面得加空格


14、${STR#SUBSTR}，从$STR头查找匹配，删除最短匹配$SUBSTR的子串；
    ${arry#SUBSTR}，对于数组，对每个数组元素单独匹配，执行删除子串操作

a="daisuki Rie Kugimiya"
echo ${a#*R}               #从左向右匹配*R匹配到daisuki R，删除并返回剩下的
b=(daisuki Rie Kugimiya)
echo ${b[@]}
echo ${b[@]#*i}            #删除了b[0]的dai,b[1]的Ri,b[2]的 Kugi



15、${STR##SUBSTR}，从$STR头部查找匹配，删除最长匹配$SUBSTR的子串
echo $a 
echo ${a##*i}
echo ${b[@]##*i}


16、${STR%SUBSTR}，从$STR尾部查找匹配，删除最短匹配$SUBSTR的子串
echo ${a%i*}
echo ${b[@]%i*}


17、${STR%%SUBSTR}，从$STR尾部查找匹配，删除最长匹配$SUBSTR的子串
echo ${a%%i*}
echo ${b[@]%%i*}


18、${STR/SUBSTR/REPLACE}，使用$REPALCE替换$STR第一个匹配的$SUBSTR
echo ${a/i/%%/}
echo ${b[@]/i/%%/}


19、${STR//SUBSTR/REPLACE}，使用$REPALCE替换$STR中所有匹配的$SUBSTR
echo ${a//i/%%/}
echo ${b[@]//i/%%/}


20、${STR/#SUBSTR/REPLACE}，$STR中以$STR开头的，则用$REPLACE来替换匹配到的$SUBSTR
echo ${a/#su/%%}
echo ${a/#dai/%%}
echo ${b[@]/#K/@}
echo ${b[@]/#K/$$}
echo ${b[@]/#K/$#}
echo ${b[@]/#K/666}


21、${STR/%SUBSTR/REPLACE}，$STR中以$SUBSTR结尾的，则用$REPLACE来替换匹配到的$SUBSTR
echo ${a/%dai/##}
echo ${a/%miya/##}
echo ${b[@]/%ie/666}
echo ${b[@]/%ie/$$}


Bash函数或者脚本接受连续参数到数组
#1、使用shift
 typeset -a arry
 for i in `seq 0 $(($#-1))`;do
             arry[i]=$1
        shift
        done
#2、使用变量的间接引用
typeset -a arry
for i in `seq 1 $$#`;do
        #arry[$((i-1))]=${!i}
        arry[$((i-1))]=`eval echo \$$i`
done
