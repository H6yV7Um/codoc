 

-b file            若文件存在且是一个块特殊文件，则为真
-c file            若文件存在且是一个字符特殊文件，则为真
-d file            若文件存在且是一个目录，则为真
-e file            若文件存在，则为真
-f file            若文件存在且是一个规则文件，则为真
-g file            若文件存在且设置了SGID位的值，则为真
-h file            若文件存在且为一个符合链接，则为真
-k file            若文件存在且设置了"sticky"位的值
-p file            若文件存在且为一已命名管道，则为真
-r file            若文件存在且可读，则为真
-s file            若文件存在且其大小大于零，则为真
-u file            若文件存在且设置了SUID位，则为真
-w file            若文件存在且可写，则为真
-x file            若文件存在且可执行，则为真
-o file            若文件存在且被有效用户ID所拥有，则为真
-z string          若string长度为0，则为真
-n string          若string长度不为0，则为真
string1 = string2  若两个字符串相等，则为真
string1 != string2 若两个字符串不相等，则为真
int1 -eq int2      若int1等于int2，则为真
int1 -ne int2      若int1不等于int2，则为真
int1 -lt int2      若int1小于int2，则为真
int1 -le int2      若int1小于等于int2，则为真
int1 -gt int2      若int1大于int2，则为真
int1 -ge int2      若int1大于等于int2，则为真
!expr              若expr为假则复合表达式为真。expr可以是任何有效的测试表达式
expr1 -a expr2     若expr1和expr2都为真则整式为真
expr1 -o expr2     若expr1和expr2有一个为真则整式为真
特殊变量
$0                 正在被执行命令的名字。对于shell脚本而言，这是被激活命令的路径
$n                 该变量与脚本被激活时所带的参数相对应。n是正整数，与参数位置相对应($1,$2…)
$#                 提供脚本的参数号
$*                 所有这些参数都被双引号引住。若一个脚本接收两个参数，$*等于$1$2
$@                 所有这些参数都分别被双引号引住。若一个脚本接收到两个参数，$@等价于$1$2
$?                 前一个命令执行后的退出状态
$$                 当前shell的进程号。对于shell脚本，这是其正在执行时的进程ID
$!                 前一个后台命令的进程号



一. 条件测试
1. 测试文件状态
   两种测试格式：test condition 或 [ condition ]，注意后一种方式中condition和[ ]之间的空格。
   常用的测试表达式：
                  -d 判断目标是否问目录
                  -f 判断目标是否为正规文件
                  -L 判断目标是否为符号链接
                  -r 判断目标是否可读
                  -s 判断目标是否为非空，即文件长度大于0
                  -w 判断目标是否可写
                  -u 判断文件是否有suid位置设置
                  -x 判断目标可否执行


2. 测试时使用逻辑操作符
测试文件状态是否为O K，但是有时要比较两个文件状态。shell提供三种逻辑操作完成此功能。
-a 逻辑与，操作符两边均为真，结果为真，否则为假。
-o 逻辑或，操作符两边一边为真，结果为真，否则为假。
! 逻辑否，条件为假，结果为真。


3. 字符串测试
   测试格式：test "string" 或 test string_operator "string 或 test "string" string_operator "string" 或 [ string_operator "string" ] 或 [ "string" string_operator "string" ]
   string_operator:
                  = 两个字符串相等
                  != 两个字符串不相等
                  -z 字符串是否为空串
                  -n 字符串是否为非空串


4. 数值测试
   测试格式： "number"number_operator"number" 或 [ "number"number_operator"number" ]
   number_operator:
                  -eq 数值相等。
                  -ne 数值不相等。
                  -gt 第一个数大于第二个数。
                  -lt 第一个数小于第二个数。
                  -le 第一个数小于等于第二个数。
                  -ge 第一个数大于等于第二个数。


5. expr
   expr命令一般用于整数值，但也可用于字符串。一般格式为：
   expr argument operator argument
   expr 也有模式匹配的功能， 通常格式为 expr $VALUE : 'expr_model' 或 expr $VALUE : '\(expr_model\)'，前一种返回匹配的字符的个数，后一种返回匹配的字符串。


###########################################################################################


Linux字符串截取命令
一、简单截取

假设有变量 var=http://www.google.com/test.htm

1、 # 号截取，删除左边字符，保留右边字符。
echo ${var#*//}
其中 var 是变量名，# 号是运算符，*// 表示从左边开始删除第一个 // 号及左边的所有字符
即删除 http://
结果是 ：www.google.com/test.htm

 

2、 ## 号截取，删除左边字符，保留右边字符。
echo ${var##*/}
##*/ 表示从左边开始删除最后（最右边）一个 / 号及左边的所有字符
即删除 http://www.google.com/         
结果是 test.htm

 

3、 %号截取，删除右边字符，保留左边字符
echo ${var%/*}
%/* 表示从右边开始，删除第一个 / 号及右边的字符
结果是：http://www.google.com

 

4、 %% 号截取，删除右边字符，保留左边字符

echo ${var%%/*}
%%/* 表示从右边开始，删除最后（最左边）一个 / 号及右边的字符
结果是：http:

 

5、 从左边第几个字符开始，及字符的个数
echo ${var:0:5}
其中的 0 表示左边第一个字符开始，5 表示字符的总个数。
结果是：http:

 

6、 从左边第几个字符开始，一直到结束。
echo ${var:7}
其中的 7 表示左边第8个字符开始，一直到结束。
结果是 ：www.google.com/test.htm

 

7、 从右边第几个字符开始，及字符的个数
echo ${var:0-7:3}
其中的 0-7 表示右边算起第七个字符开始，3 表示字符的个数。
结果是：test

 

8、 从右边第几个字符开始，一直到结束。
echo ${var:0-7}
表示从右边第七个字符开始，一直到结束。
结果是：test.htm

注：（左边的第一个字符是用 0 表示，右边的第一个字符用 0-1 表示）

 


