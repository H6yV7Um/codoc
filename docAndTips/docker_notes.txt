一、关于Container

1.以ubuntu为image创建一个匿名container，并在container中运行 /bin/bash :
  #docker run -i -t ubuntu /bin/bash
  <* -i 让container保持STDIN打开，-t告诉docker通过pseudo-tty与container的STDIN连接 *>

  也可以用选项--name指定container的名字，如
  #docker run --name myContainer -i -t ubuntu /bin/bash

2.启/停container
  #docker start/stop myContainer 

3.连接一个运行中的container
  #docker attach myContainer 

4.用-d标签 创建一个daemon container， 并执行-c指定的命令
  #docker run --name myContainer -d ubuntu /bin/sh -c "while true; do echo hello world; sleep 1; done"

5.查看container的日志
  #docker logs myContainer 
  #docker logs -f myContainer 
  #docker logs -ft myContainer 

6.查看container中的进程
  #docker ps
  #docker top myContainer 
  #docker inspect myContainer 
  #docker inspect --format='{{ .State.Running }}' myContainer 

7.删除container
  #docker rm myContainer 
  #docker rm `docker ps -a -q`   ---删除所有container

8.导出container
  #docker export <containerName/containerId> > container.tar

9.导入container
  #cat container.tar | docker import - dockerzxg/sample


---------------------------------------------------------------------------------------------
二、关于Dockerfile指令

1.CMD ---指定container启动后要执行的程序，如果docker run命令行里指定了程序，CMD里的程序将被覆盖
  如：CMD ["/bin/true"] 和 CMD ["/bin/bash", "-l"]

2.ENTRYPOINT  ---指定container启动后要执行的程序，同时docker run命令字段指定的信息，或CMD指定的信息，
		将被传给ENTRYPOINT做为参数来执行
  如：设置 ENTRYPOINT ["/usr/sbin/nginx"]时， 当运行docker run -d dockerzxg/nginx -g "daemon off;"
  container启动后执行的程序将是 /usr/sbin/nginx -g "daemon off;"   其效果等同于在Dockerfile是直接设置
  ENTRYPOINT ["/usr/sbin/nginx", "-g", "daemon off;"]

  **** CMD 和 ENTRYPOINT 联合使用
  ENTRYPOINT ["/usr/sbin/nginx"]
  CMD ["-h"]
  任何container启动时，默认情况下都会执行/usr/sbin/nginx -h， 当在docker run里指定了其他参数，CMD里的
  -h选项将被覆盖，如 docker run -d dockerzxg/nginx -g "daemon off;" 当container启动后，将执行
  /usr/sbin/nginx -g "daemon off;"
  
3.WORKDIR ---设置container的工作目录

4.ENV ---设置环境变量

5.USER ---设置container运行用户

6.VOLUME ---给container设置一个文件系统挂载点
  如：VOLUME ["/opt/project"] 和 VOLUME ["/opt/project", "/data" ] 在container的根目录下将创建两上目录
  /opt/project 和 /data 用于挂载文件系统

7.ADD ---用从当前创建image的环境中，将文件或目录添加到container中
  如：ADD software.lic /opt/application/software.lic 即software.lic文件将被添加到新建image的
  /opt/application/software.lic
  又如：ADD http://wordpress.org/latest.zip /root/wordpress.zip
  又如：ADD latest.tar.gz /var/www/wordpress/

8.COPY ---与ADD命令差不多，只是没有解压缩功能

9.ONBUILD ---指出当此新建的image被用去创建其他新的image的时候，其指定的命令程序将被执行




---------------------------------------------------------------------------------------------
三、关于Image

1.查看所有image
  #docker images
  #docker images ubuntu/fedora

2.下载image
  #docker pull fedora

3.搜索一个名叫puppet的image
  #docker search puppet

4.通过当前目录里的Dockerfile，在dockerzxg库中，创建一个名叫nginx的image
  #docker build -t dockerzxg/nginx .
  #docker build --no-cache -t dockerzxg/nginx .

5.从新的image创建一个container，且用-p指定container中使用的端口，并执行命令nginx -g "daemon off;"
  #docker run -d -p 80 --name myNginx dockerzxg/nginx nginx -g "daemon off;"
  #docker ps -l
  #docker port myNginx 80       ---查看本地主机使用哪个端口映射到container的80端口了

  #docker run -d -p 8080:80 --name myNginx dockerzxg/nginx nginx -g "daemon off;"
   <* 指定本地主机的8080端口映射到myNginx container的80端口 *>

  #docker run -d -p 127.0.0.1:80:80 --name myNginx dockerzxg/nginx nginx -g "daemon off;"
   <* 指定127.0.0.1主机的80端口映射到myNginx container的80端口 *>

  #docker run -d -p 127.0.0.1::80 --name myNginx dockerzxg/nginx nginx -g "daemon off;"
   <* 127.0.0.1主机的49000至49900任意端口将被映射到myNginx container的80端口 *>

6.将名dockerzxg/nginx的image提交到Docker Hub
  #docker push dockerzxg/nginx

7.删除image
  #docker rmi dockerzxg/nginx
  #docker rmi `docker images -a -q`      ---删除所有image

8.
  #docker run -p 5000:5000 registry


9.导出镜像
  #docker save -o ubuntu.16.04.tar <imageName/imageId>

10.导入镜像
  #docker load --input ubuntu.16.04.tar
  #docker load < ubuntu.16.04.tar


---------------------------------------------------------------------------------------------
四、关于服务器架设

1.集成一个apache web

  创建jekyll网页生成服务的image
  #docker build -t dockerzxg/jekyll . 

  创建apache服务的image
  #docker build -t dockerzxg/apache .         
  
  创建container，并将源码目录james_blog挂载到container的/data目录上，根据Dockerfile和james_blog源码的设置
  其运行的结果是会将james_blog中的源文件生成web页面，并保存到/var/www/html目录上
  #docker run -v /home/james/james_blog:/data/ --name james_blog \jamtur01/jekyll

  创建一个apache服务器container，通过--volumes-from选项，会使在james_blog设置的volume可以被挂载到新创建的
  container中，这样就可以通过访问此apache应用，从而可以访问到james_blog的页面了,-P选项将Dockerfile中
  EXPOSE指定的端口全部导出到container中
  #docker run -d -P --volumes-from james_blog dockerzxg/apache

  由于volume在没有任何一个container引用它时，会自动被删除，因此需要对volume做必要的备份,--rm选项做使用程序
  运行完后自动删除此container
  #docker run --rm --volumes-from james_blog -v$(pwd):/backup ubuntu tar cvf /backup/data.tar /var/www/html
  

2.集成一个tomcat
 
  创建一个下载器image
  #docker build -t dockerzxg/fetcher .

  生成一个下载器container下载文件
  #docker run -t -i --name sample dockerzxg/fetcher https://tomcat.apache.org/tomcat-7.0-doc/appdev/sample/sample.war

  创建tomcat7 image
  #docker build -t dockerzxg/tomcat7 tomcat7/

  创建一个tomcat容器，对下载的var文件进行测试使用
  #docker run --name sample_app --volumes-from sample -d -P dockerzxg/tomcat7
  #docker run --name sample_app_test --volumes-from sample -d -p 127.0.0.1:8090: dockerzxg/tomcat7



3.多容器应用集成

  创建nodejs镜像
  #docker build -t dockerzxg/nodejs nodejs/

  创建基础redis镜像----以后的主从redis镜像都是基于此
  # docker build -t dockerzxg/redis redis_base/

  创建主redis_primary镜像
  # docker build -t dockerzxg/redis_primary redis_primary/

  创建复本redis_replica镜像
  #docker build -t dockerzxg/redis_replica redis_replica/

  基于redis_primary镜像创建一个主redis容器，-h设置主机名
  #docker run -d -h redis-primary --name redis_primary dockerzxg/redis_primary 
  
  查看redis的日志，由于主redis镜像设置了日志写入文件中，所以可以通过下面方式读取日志内容
  #docker run -ti --rm --volumes-from redis_primary ubuntu cat /var/log/redis/redis-server.log

  基于redis_replica镜像创建从redis容器
  #docker run -d -h redis-replica1 --name redis_replica1 --link redis_primary:redis-primary dockerzxg/redis_replica

  创建node容器
  #docker run -d --name nodeapp -p 3000:3000 --link redis_primary:redis-primary dockerzxg/nodejs

  创建捕获日志的镜像
  #docker build -t dockerzxg/logstash logstash/

  创建日志收集容器
  #docker run -d --name logstash --volumes-from redis_primary --volumes-from nodeapp dockerzxg/logstash


4.Container管理
  
  由于在docker世界中，大部分container只运行一个进程，因此不会有ssh等其他连接管理的进程，从某种意义上说，docker世界中
  是对外部没有什么可访问的入口的，不过，可以通过volumes和link机制，或nsenter工具进行管理
  #docker kill -s <signal> <container>       -------给容器发送信号
  
  安装nsenter
  #docker run -v $PWD:/target jpetazzo/nsenter

  通过nsenter进入到container的shell环境中
  #PID=$(docker inspect --format {{.State.Pid}} <container>)
  #nsenter --target $PID --mount --uts --ipc --net --pid 

  通过nsenter进入到container的shell环境中，并运行ls命令
  #nsenter --target $PID --mount --uts --ipc --net --pid ls



































